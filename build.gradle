/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'david.lozano' at '4/25/16 4:20 PM' with Gradle 2.13
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.13/userguide/tutorial_java_projects.html
 */

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'war'
apply plugin: 'com.bmuschko.cargo'

war {
    baseName = 'WeatherQueue'
    //version = '1.0.0-BUILD-SNAPSHOT'
}

buildscript {
	
	ext {
		gradleCargoVersion = '2.2.1'
	}

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "com.bmuschko:gradle-cargo-plugin:${gradleCargoVersion}"
    }
}

cargo {

	containerId = 'tomcat8x'
	
	local {
        installer {
            installUrl = 'http://apache.osuosl.org/tomcat/tomcat-8/v8.5.0/bin/apache-tomcat-8.5.0.zip'
            downloadDir = file("$buildDir/download")
            extractDir = file("$buildDir/extract")
        }
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8

repositories {

    mavenCentral()
}

configurations {
	compile.exclude group: "commons-logging", module: "commons-logging"
}

dependencies {

	ext {
	
		springVersion = '4.1.4.RELEASE'
		springBatchVersion = '3.0.6.RELEASE'
		testNgVersion = '6.9.10'
		activeMqVersion = '5.13.2'
		slf4jVersion = '1.7.21'
		mockitoVersion = '1.10.19'
		javaxServletVersion = '3.1.0'
		jacksonVersion = '2.7.4'
		lombokVersion = '1.16.8'
		logbackVersion = '1.1.7'
		jclOverSlf4jVersion = '1.7.21'
	}

    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "org.projectlombok:lombok:${lombokVersion}" 
    
    //Web - Rest - Integration - Messaging
    compile "javax.servlet:javax.servlet-api:${javaxServletVersion}" 	
   	compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
   	compile "org.apache.activemq:activemq-spring:${activeMqVersion}"
   	compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    
    //Spring
    compile "org.springframework:spring-core:${springVersion}"
    compile "org.springframework:spring-context:${springVersion}"
   	compile "org.springframework:spring-context-support:${springVersion}"
   	runtime "org.springframework:spring-web:${springVersion}"
   	runtime "org.springframework.batch:spring-batch-core:${springBatchVersion}"
   	runtime "org.springframework:spring-tx:${springBatchVersion}"
   	compile "org.springframework:spring-oxm:${springVersion}"
   	compile "org.springframework:spring-jms:${springVersion}"
   	compile "org.springframework:spring-webmvc:${springVersion}"
   	compile "org.springframework:spring-messaging:${springVersion}"
   	
   	//Test
   	testCompile "org.testng:testng:${testNgVersion}"
    testCompile "org.mockito:mockito-all:${mockitoVersion}"   
    
    //Logging
    compile "ch.qos.logback:logback-classic:${logbackVersion}"
    compile "org.slf4j:jcl-over-slf4j:${jclOverSlf4jVersion}"
}

test {

	useTestNG()
}